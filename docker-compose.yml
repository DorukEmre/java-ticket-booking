services:
  mysql:
    image: mysql:8.4.6
    container_name: mysql
    restart: always
    env_file:
      - .env
    ports:
      - "3306:3306"
    volumes:
      - ./infrastructure/mysql/init-db-user.sh:/docker-entrypoint-initdb.d/init-db-user.sh
      - db-data:/var/lib/mysql
    networks:
      - ticket-booking-network

  react:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    image: react
    container_name: react
    ports: # for development
      - 5173:5173
    # expose: # for production
    #   - 5173
    env_file:
      - .env
    environment:
      - PUBLIC_URL=/
      - REACT_APP_API_BASE_URL=http://localhost:8080
    networks:
      - ticket-booking-network
    volumes:
      - /app/node_modules # to avoid overwriting node_modules
      - ./frontend:/app # for development (for live changes to be reflected)
      # - ./frontend/dist:/app/dist # for production (build directory)

  inventory-service:
    build:
      context: ./backend/inventoryService
      dockerfile: Dockerfile
    image: inventory-service
    container_name: inventory-service
    volumes:
      - ./backend/inventoryService:/app
    working_dir: /app
    ports:
      - 8080:8080
    command: ["mvn", "spring-boot:run"]
    depends_on:
      - mysql
    environment:
      SERVER_PORT: "8080"
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL_INVENTORY}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
    networks:
      - ticket-booking-network

  booking-service:
    build:
      context: ./backend/bookingService
      dockerfile: Dockerfile
    image: booking-service
    container_name: booking-service
    volumes:
      - ./backend/bookingService:/app
    working_dir: /app
    ports:
      - 8081:8081
    command: ["mvn", "spring-boot:run"]
    depends_on:
      - mysql
    environment:
      SERVER_PORT: "8081"
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL_BOOKING}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      INVENTORY_BASE_URL: "inventory-service:8080"
    networks:
      - ticket-booking-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 3000

  kafka-broker:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-broker
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8084:8080"
    depends_on:
      - kafka-broker
    environment:
      KAFKA_CLUSTERS_NAME: local
      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: kafka-broker:29092
      DYNAMIC_CONFIG_ENABLED: 'true'

  kafka-schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: kafka-schema-registry
    container_name: kafka-schema-registry
    depends_on:
      - kafka-broker
    ports:
      - "8083:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka-broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://kafka-schema-registry:8081

networks:
  ticket-booking-network:
    driver: bridge

volumes:
  db-data: